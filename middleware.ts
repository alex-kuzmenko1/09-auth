import { NextRequest, NextResponse } from "next/server";
import { checkServerSession } from "./lib/api/serverApi";

const privateRoutes = ["/profile", "/notes"];
const publicRoutes = ["/sign-in", "/sign-up"];

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  const accessToken = request.cookies.get("accessToken")?.value;
  const refreshToken = request.cookies.get("refreshToken")?.value;

  const isPublicRoute = publicRoutes.some(route => pathname.startsWith(route));
  const isPrivateRoute = privateRoutes.some(route => pathname.startsWith(route));

  // üîπ –ï—Å–ª–∏ –Ω–µ—Ç accessToken, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ refreshToken
  if (!accessToken && refreshToken) {
    const refreshed = await checkServerSession();

    if (refreshed && refreshed.accessToken) {
      const response = NextResponse.next();

      // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫—É–∫–∏ –≤ –æ—Ç–≤–µ—Ç
      response.cookies.set({
        name: "accessToken",
        value: refreshed.accessToken,
        path: "/",
        httpOnly: true,
        maxAge: 60 * 60,
      });

      if (isPublicRoute) {
        return NextResponse.redirect(new URL("/", request.url));
      }

      return response;
    }

    // ‚ùå –µ—Å–ª–∏ refreshToken –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
    if (isPrivateRoute) {
      return NextResponse.redirect(new URL("/sign-in", request.url));
    }
    return NextResponse.next();
  }

  // üîπ –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
  if (!accessToken && !refreshToken) {
    if (isPrivateRoute) {
      return NextResponse.redirect(new URL("/sign-in", request.url));
    }
    return NextResponse.next();
  }

  // üîπ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
  if (accessToken && isPublicRoute) {
    return NextResponse.redirect(new URL("/", request.url));
  }

  // ‚úÖ –í—Å—ë –æ–∫ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  return NextResponse.next();
}

export const config = {
  matcher: ["/profile/:path*", "/notes/:path*", "/sign-in", "/sign-up"],
};
